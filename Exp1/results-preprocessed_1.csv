Q105,Q99,Q130,Q131,Q132,Q134,Q123,Q124,Q125,Q127,Q61,Q62,Q63,Q79,Q80,Q81a,Q57,Q58,Q59,Q37,Q36,Q31,Q32,Q141,Q142,Q143,Q136,Q137,Q138,Q54,Q55,Q44,Q45,Q92,Q81b,Q93,Q109,Q103,Q117,Q111,Q155,Q30,Q144,Q139,Q97,Q84,Q96a
במימוש יש מחלקה המתארת קובץ במערכת. מה לדעתך יהיה שם השדה המתאר את גודל הקובץ?,The implementation contains a class which describes a file within the system. How would you name the field describing the file’s size?,החלף var1 בשם בו אתה היית משתמש.,החלף var2 בשם בו אתה היית משתמש.,החלף var3 בשם בו אתה היית משתמש.,איך הייתם קוראים למשתנה שמתאר את מצב הדלת (פתוחה/סגורה)?,Replace var1 with a name you would have used.,Replace var2 with a name you would have used.,Replace var3 with a name you would have used.,How would you call the variable describing the state of the elevator’s door (open/closed)?,How would you call the variable holding the location of the cheese today?,How would you call the variable (or data structure) keeping track of where has he already visited?,How would you call the data structure describing the maze?,How would you call the variable holding the location of the cheese today?,How would you call the variable (or data structure) keeping track of where has he already visited?,How would you call the data structure describing the labyrinth?,איך תקרא למשתנה שמציין היכן הגבינה היום?,איך תקרא למשתנה (או למבנה הנתונים) שעוקב אחרי איפה הוא כבר היה?,איך תקרא למבנה הנתונים שמתאר את המבוך?,How would you call the variable which holds the game time?,We will have a data structure which assigns a number to each square in the board as follows:  • -1 if the square contains a mine  • The number of mines in the adjacent squares otherwise  How will you name this data structure?,איך תקרא למשתנה שמחזיק את זמן המשחק?,"נחזיק מבנה נתונים שמתאים לכל משבצת בלוח מספר באופן הבא:​ ​• 1- אם המשבצת מכילה מוקש. • מספר המוקשים במשבצות הצמודות אליה, אחרת.  איזה שם תיתן בקוד שלך למבנה נתונים זה?",תנו שם לקבוע שמחזיק את המספר 4 בהתאם לתפקידו.,תנו שם לקבוע שמחזיק את המספר 2000 בהתאם לתפקידו.,תנו שם משתנה למספר הפינוקים להם זכאי הלקוח בחודש הנוכחי.,Name the constant holding the value 4 according to its purpose.,Name the constant holding the value 2000 according to its purpose.,Name the variable holding the number of benefits the client is entitled to during the current month.,Name the constant containing the value 45:,Name the variable for the hourly wage during overtime pay:,תנו שם לקבוע 45:,תנו שם למשתנה עבור ערך השכר לשעה בשעות הנוספות:,מה יהיה שם המשתנה (או מבנה הנתונים) שמתאר/מחזיק את מצב לוח המשחק כרגע?,How would you name the variable (or data structure) describing the current state of the game board?,How would you name the variable (or data structure) describing the current state of the game grid?,"במימוש יש פונקציה שמקבלת קובץ, בכמה רוצים להגדיל אותו, ואת השטח הפנוי בדיסק, ובודקת האם יש מספיק מקום. הצע חתימה לפונקציה הזו.","The implementation includes a function that receives a file, by how much we want to increase it, and the available space on the disk, and checks whether there is enough space. Suggest a signature for this function.","Write an API function signature to help Ori calculate, given the quantities of ingredients he has, how many sandwiches he can produce.","כתבו חתימה לממשק שיעזור לאורי לחשב, בהינתן כמויות המצרכים הבסיסים שבידיו, כמה קסטות יוכל להכין.",The game’s level of difficulty depends on the grid size and the number of mines in it.  Write a function signature for a function which receives the above parameters and returns the level of difficulty of the game.,"דרגת קושי המשחק תלויה בממדי הלוח ובמספר המוקשים בו. כתוב חתימה לפונקציה שמקבלת את הפרמטרים הנ""ל ומחזירה את דרגת הקושי של המשחק.","כאשר משתמש רוצה לנצל פינוק, המערכת מפעילה פונקציה שפועלת כך:  מקבלת:    כמה פינוקים אותו הלקוח זכאי החודש    כמה פינוקים אותו הלקוח ניצל החודש  הפונקציה מחשבת את ההפרש. אם היתרה חיובית הפונקציה מחזירה TRUE.  כתבו חתימה לפונקציה הזו.","When a customer wants to use a benefit, the system executes a function which works as follows:  Input:     Number of benefits the customer is entitled to during the current month     Number of benefits the customer has used during the current month  The function calculates the difference, and returns TRUE if the balance is positive.  Write a function signature for this function.",כדי לשחק צריך להציג את הלוח למשתמש. הצע חתימה לפונקציה שעושה זאת (שם פונקציה + פרמטרים).,Playing requires displaying the board to the user. Propose a function signature for this purpose (function name + parameters),Playing requires displaying the grid to the user. Propose a function signature for this purpose (function name + parameters)
size,,,,,,,,,,,,,,,,cheese_loc,former_locations,maze,,,time,mines_sqaure,,,,MAX_BENEFITS_NUM,BENEFIT_THRESHOLD,client_benefits,,,FUll_SCHEDULE,ADD_PAYOUT,,,grid,"is_enough_space(file, size, space)",,"max_sandwiches(biscuits, icecream, paper length, paper width)",,,"difficulty(size, mines_num)",,"bool is_bal_positive(entitled, used)",,,show_grid(grid)
fileSize,,,,,,,,,,,,,getTodayCheeseLoation(),visitedRooms,labData,,,,currentGameTimePassed,squaresData,,,MAX_PINUK_IN_MONTH,SHEKELS_PER_PINUK,numberOfDeservedPinuks,,,,,,FULL_TIME_JOB_HOURS,EXTRA_HOUR_PAY_ADDITION,,gameState,,"boolean isPosibleToEnlargeFile(file, extraSize, freeDiskSpace);",,,"int culcNumberOfCaset(float bicuitAmout , float vanilIceCreemAmount, float paperAmount);","int getGameDifficulty(int gridSize, int numberOfMines);",,"boolean isBalancePositive(int deservedPinuks, int pinuksUsed);",,,void displayBoard(gameState);,
,size,,,,,,,,,,,,cheese_loc,visited,graph,,,,,,timer,mine_grid,,,,MAX_BENEFITS,ILS_PER_BENEFIT,num_potential_benefits,MIN_WEEKLY_HOURS,OVERTIME_WAGE,,,,board,,,"bool enough_space_left(FILE* fp, uint space_left, uint new_size)",,"uint casata_potential(uint biscuits, double ice_cream_cups, double w_alum, double h_alum)",,"double level(int w, int h, int num_mines)",,"bool (int num_potential_benefits, int num_used_benefits)",,void draw(),
,,,,,,dest_floor,src_floor,floor_diff,is_open,,,,Current_cheese_location,visited,maze,,,,elapsed_time,board,,,MAX_MONTHLY_TREATS,TREAT_PRICE,current_mont_treats,,,,STANDARD_PAY_HOURS,overtime_rate,,,,board,,,,"Int number_of_sandwiches(int biscuits, double icecream, int wrappers)",,"Int difficulty(int grid_x, int grid_y, int mines);",,"bool check_treats(int credit, int used)",,,void board::display() const;,
size,,,,,,input_floor,curr_floor,floor_diff,curr_state,,,,curr_pos,Position,Labyrinth,,,,time_elasped,,,,MAX_TREATS,NIS_PER_TREAT,customer_treats,,,,FULL_TIME_WEEKLY_HOURES,OVERTIME_WEDGE,,,CurrState,,,CheckFileSize,,,"calc_num_kasata(num_bisquites, num_...","CalcDifficulty(num_mines, grid_size)",,,,ShowBoard(),,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,HOURS_FULL_JOB,EXTRA_HOURS_RATE_ADDITION,Board_status,,,,,,,,,,,Void show_board(),,
,size,destination,location,distance,is_open,,,,,,,,cheese_location,visited,labyrinth,,,,,,,,MAX_PERKS,PERK_COST,allowed_perks,,,,REGULAR_HOURS,overtime_pay,,,,board,,,"can_increase(File file, int increase, int space_availablebool )","int max_sandwiches(int biscuits, double vanilla, Paper paper)",,,,"is_elligible_for_perk(int remaining_perks, int used_perks)",,,display(Board board),
size,,targetFloor,currentFloor,floorsToMove,elevatorDoorState,,,,,,,,,,,currentCheeseLocation,visitLocationHistory,Maze,gameTimeCounter,GridMineMap,,,,,,MAX_BENEFITS_PER_MONTH,ILS_PER_BENEFIT,currentBenefitsEntitlement,,,OVERTIME_HOURS_THRESHOLD,overtimePayHourlyRate,,,,"bool canEnlargeFile(File file, int sizeToAppend, int diskFreeSize);",,,"int calculateICSQuantityFromIngredients(int chocolateBiscuitQuantity, float vanillaCups, int paperWidth, int paperHeight, int paperQuantity);","int calculateDifficulty(int gridWidth, int gridHeight, int mineCount);",,,"bool canUseBenefit(int currentBenefitsEntitlement, int currentBenefitsUsed);",,,
size,,toFloor,fromFloor,numOfFloorsToGo,isDoorClosed,,,,,,,,,,,lastRoomCheeseLocated,cheeseLocationHistory,maze,,,,,,,,MAX_BENEFITS,BILLED_FOR_BENEFIT,benefitsGained,,,FULL_TIME_HOURS,OVER_TIME_PAYMENT,,board,,isSpaceAvailable(file),,"int totalAmountProductable(biscuits, iceCreams, papers)",,,,,bool hasBenefits(),,displayBoard(),
size,,,,,,location,destination,distance,door,,,,Cheese_pos,Visited,labyrinth,,,,time,grid,,,MAX_PINUK,PINUK_PRICE,pinuks,,,,,,Regular_rate,Increased_rate,,,grid,"isAvailable(file, size, disk)",,"Sandwich_quantity(chocolate, icecream, paper)",,"GameDifficulty(grid_size, num_mines)",,"hasPinuk(recieved, used)",,,,Print_grid()
,,,,,,Destination_floor,Current_floor,Number_of_floors,Door_state,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hours_in_full_time = 45,overtime_bonus=10,,,game_state,,,,,,,,,,,draw_state(game_state)
size,,,,,,requested_floor,current_floor,floors_to_move,is_door_open,,,,,,,cheese_location,visited,maze,game_time,tile,,,,,,,,,,,,,,,,"is_file_enlarge_possible(file, enlarge, free_space)      returns bool",,,calc_num_units,"calc_difficulty(grid_size, num_mines)        return float",,,,,,
,,,,,,dest_floor,org_floor,diff_floors,door_open,,,,,,,cheese_loc,past_visits,mase,,,total_time,mines_matrix,,,,MAX_BENEFITS_PER_MONTH,BILLING_SUM_FOR_BENEFIT,cur_benefits,FULL_TIME_CAPACITY,overtime_rate,,,,,cur_board,,,,"materials(units) returns b, ic, w",,"int game_level(h,w, mines)",,"exists_valid_benefits(cur_benefits, used_benefits)",,,show_board(cur_board)
fileSize,,destinationFloor,currentFloor,numOfFloors,doorState,,,,,,,,cheeseLocation,visitedCoordinates,labyrinth,,,,,,timer,Slot,,,,MAX_MONTHLY_BENEFITS,ENTITLEMENTS_THRESHOLD,currentMonthEntitlement,,,,,,boardCurrState,,"public boolean canIncreaseSize(file, int increaseBy, int available space)",,,"public int productExpectedQuantity( int biscuits, double icecreamCups, double height, double wodth)",,"public int getLevel(int width, int height, int numOfMines)",,"public boolean isEntitledToUse(int currentMonthEntitlement, int currentMonthUsage)",,List<List<string>> getBoard(),
,_size,to_floor,from_floor,delta_floors,is_door_open,,,,,,,,,,,cheese_location,seen_locations,maze,,,,,MAX_PINUKIM,PAYMENT_PER_PINUK,available_customer_pinukim,,,,BASE_RATE,hourly_rate,,,Board,,,,increaseFileSize(file),"min(biscuits//2, floor(vanilla/0.5), (wrapping_paper_height//20) * (wrapping_paper_width//10))",,,,return (available_customer_pinukim-customer_pinukim_used>0) and customer_pinukim_used<MAX_PINUKIM,,show(),,
file_size,,,,,,,,,,cheese_loc,visited_locs,maze,,,,,,,time,grid,,,,,,max_benefits,shekel_per_benefit,entitled_benefits_per_month,required_work_hours,overtime_rate,,,board,,,"can_enlarge(file, factor, avail_place)",,"calculate_num_of_sandwiches(biscuit, ice_cream, paper)",,"get_difficulty(grid_size, mines_num)",,,"can_use_benefit(entitled_benefits_per_month, used_benefits)",get_board(size),,
size,,,,,,destinationFloor,currentFloor,floorsToMove,isDoorOpened,objectiveLocation,visitedLocation,location,,,,,,,,,time,board,,,,kMaxBenefits,kAmountPerBenefit,benefitsNumber,kFullTimeHours,kOvertimeWageIncrease,,,,,,"canAddToFile(addSize, FreeSpace)",,"numIceCreamSandwich(uint numChocolateBiscuits, uint numVanillaIceCreamCups, size wrappingPaperSize)",,,"gameLevel(size, numOfMines)",,"entitledToBenefit(benefitsNumber, benefitsUsed)",,,
,,,,,,,,,,,,,,,,Cur_cheese_location,Visited,Maze,Time,Board,,,,,,,,,,,,,,Current_board,,,,,,"International  calc_dfficulty(size,num_of_mines",,,,,Void display_board(),
,size,cur_pose,goal,num_floors_to_move,door_state,,,,,,,,,,,cheese_location,visited_map,map,game_time,game_map,,,,,,,,,,,BASE_HOURS_PER_WEEK,extra_hours_bonus,,,,,"can_increase(file, by, available_dosk_space(",,,"difficulty(grid_size, num_mines(",,,,,,
size,,,,,,,,,,,,,,,,dailyCheeseLoc,prevCheeseLocs,maze,,,,,,,,,,,,,HOURLY_RATE,EXTRA_HOURS_RATE,,,,"checkDiskSpace(file, sizeToCheck, diskFreeSie)",,,"ניצחתם, זה חופר מדי",,,,,,,
,,Dest,Curr,Floors,IsOpen,,,,,,,,,,,curr,visited,maze,,,,,MAX_BONUS,BONUS_STEP,TOTAL_BONUS,,,,,,,,,,state,,,,,,,hasBonus,,,,ShowBoard (board)
,,,,,,,,,,,,,,,,,,,,,Time,NumMines,,,,,,,,,,,,,,,,,,,"Int difficulty(Int size, Int mines)",,,,,
size,,target_level,current_level,level_difference,is_closed,,,,,,,,,,,,,,session_time,board,,,,,,,,,,,,,,,,"is_enough_space(file, size_increase, available_space)",,,"get_num_casatas(bisc_num, vanilla_cups_num, paper_length, paper_width)","board_difficulty(height, width, mines_num)",,,,,,
,file_size,,,,,,,,,,,,cheese_location,visited,labyrinth,,,,,,game_duration,mines_indicator,,,,,,,,,,,,,board_state,,"isValidIncrease(file, addSpaceSize, freeSpaceSize)",,,,"getGameLevel(hight, width, mines)",,,,,draw_grid(board_state)
,file_size,,,,,,,,,,,,,,,cheeze_loc,visited,maze_room,,,,,,,,,,,,,NORMAL_HOURS_PER_WEEK,SPECIAL_RATE,,game_node,,,"update_file(file, update_size, free_space)",,,,,,,,display_board(game_node),
size,,dest,current,gap,isOpen,,,,,,,,,,,chease_place,visited,maze,,,,,,,,,,,fullTimeHours,extraHoursRate,,,,currentState,,"boolean enoughSpaceToExpand(file, size, freeSpace)",,,,,,,,,display(state),
,fSize,,,,,,,,,,,,locCheese,visited,labyrinth,,,,"timer, counter",MinesweeperBoard,,,,,,MAX_BENEFITS_PER_MONTH,ILS_PER_BENEFIT,numBenefits,,,,,,,gameState,,"static bool isEnoughSpace(File file, unsigned long incBy, unsigned long freeSpace);",,,"static int getMineSweeperDifficulty(int gridSize, int numMines);",,,"static bool checkBalance(unsigned int numEntitled, unsigned int numUsed);",,,void displayGrid();
,fieldSizeBytes,currFloor,destFloor,numOfFloors,isDoorOpen,,,,,,,,,,,currCheesePosition,visitedPositions,maze,,,secondsSinceStart,boardSetting,,,,,,,,,BASE_HOURS_WEEKLY,ADDITIONAL_HOUR_RATE,boardState,,,,"boolean verifyFileEnhancement(File file, int bytesToEnhance, int diskFreeBytes)","int getNumSandwiches(int biscuits, double iceCreamCups, int wrapperWidth, int wrapperHeight)",,,"getDifficulty(int numOfMines, int boardWidth, int boardHeight)",,,getBoard(),,
,,DesiredFloor,CurrentFloor,FloorNum,IsOpen,,,,,,,,,,,,,,,,,,,,,,,,,,RegularWeekWorkHours,ExtraPayPerHour,Board,,,,,"HowManySandiwichesFromIngredients(biacuitsNum, IceCreamCups, PaperArea)",,,,,,DisplayBoard(board),,
,_size,destinationStory,initialStory,numOfStoriesToGo,_isDoorOpen,,,,,,,,,,,,,,playTime,Square,,,,,,MAX_BENEFITS_PER_MONTH,BILLED_AMOUNT_FOR_BENEFIT,_currentNumOfBenefits,,,FULL_TIME_HOURS,EXTRA_HOURS_ADDITION,,,,,"hasEnoughSpaceToIncrease(File file, Number increasBy)",,,"WhatsTheDifficulty(into gridSize, into numOfMines)",,,"CanUseABenefit(currentNumOfBenefits, currentNumOfBenefitsUsed)",,,
,size,,,,,,,,,TODAY_CHEESE_LOCATION,visitedLocations,maze,,,,,,,timeFromBeginning,adjacentMinesArray,,,MAX,MAX_MONTHLY_BONUSES,currMonthlyBonuses,,,,FULL_TIME_HOURS,OVERTIME_RATE,,,,,,,"bool canIncreaseFilSize(file,byAmount,diskCapacity)",,,"int calcGameDifficulty(width,height,mineCount)",,"bool hasBonusesLeft(monthlyBonuses,usedBonusesSoFar)",,,,
,,,,,,target_level,curr_level,move_level_amount,door_state,,,,,,,,,,,,,,,,,MAX_NUM_BENEFITS,AMOUNT_PER_BENEFIT,curr_month_benefits,WEEKLY_WORK_HOURS,overtime_extra_payment,,,,,,,,,,,,,"boolean is_entitled(int entitled,int used)",,,
,,,,,,,,,,,,,cheeseLocation,visitedRooms,maze,,,,,,gameLength,mineGrid,maxPerks,spendingIncrement,currentPerks,,,,,,overtimeBoundry,overtimeRate,,,,,,,"def canMake (biscuits, icecream, paper)",,"def minesweeper(height,width,mines)","def elligible(earned,spent)",,,,
Size,,targetFloor,currentFloor,floorsShift,isDoorOpened,,,,,,,,,,,,,,,,,,MaxGiftsPerMonth,RequiredExpensesForGift,currentGiftThisMonth,,,,,,,,,,,"Bool canEnlargeFile(file, newsSize, freSizeOnDic)",,,,,,"Bool CanUseGift(userOwnedGifts, userUsedGifts)",,,,
fileSize,,,,,,,,,,,,,cheeseLocation,VisitedRooms,Labyrinth,,,,,,Clock,Cell,,,,,,,,,,,,,,"CheckIfFileCanBeEnlarge(file, size, freeSpace)",,,,,"int difficultyLevel(int dementionLevel, int bombs)",,,,,
,,CurrFloor,DetinatedFloor,FloorsToMove,IsDoorOpen,,,,,,,,CurrLocation,VisitedRooms,Labyrinth,,,,,,,,NumberOfPinukim,PriceRewardsPinuk,PinukimCurMonth,,,,,,,,,,,,,,,,,IsPinukValid,,,,
,_fileSize,,,,,,,,,,,,cheese_location,visited_map - a 2D array,a 2D array,,,,_timeCounter,minesMap,,,,,,,,,,,,,,,,,"boolean CanIncreaseFile(File file, int delta_bytes, int free_disk_space_bytes)",,"double calc_kasata(int bisq, double icecream, int paper_cm_sq)","int difficulty(int grid_size, int mines_num)",,,,,,
fileSize,,,,,,,,,,,,,cheeseLocation or prizeLocation or cheesePos or prizePos or targetPos or tgtPos or goalPos,"visitedLocation or visitedLoc, or visitedPos, or usedCells",labyrinth or maze or map or gameMap or level,,,,,,,,MAX_GIFTS_PER_MONTH,MONEY_TO_GIFT_THRESHOLD,userNumGifts,,,,NORMAL_WEEK_HOURS,bonusMoneyPerHour,,,,,,"bool increaseFileSize(File file, int size)",,,,,,"bool canGetGifts(int numAvailableGifts, int numUsedGifts)",,,,
fileSizeBytes,,,,,,,,,,,,,,,,,,,timeSinceStart,GAME_CELL,,,,,,MAX_MONTHLY_BENEFITS,BENEFIT_THRESHOLD,numBenefitsForMonth,FULLTIME_WEEKLY_WORK_HOURS,overtimeHourlyWage,,,,,,"bool isEnlargeFilePossible(File file, int enlargeByBytes, long availSpace)",,"int calculatePotentialSandwiches(int numBiscuits, float numVanillaCups, long paperLengthCm, long paperWidthCm)",,"DIFFICULTY_LEVEL_ENUM difficultyLevel (int numRows, int numCols, int numMines)",,,"bool clientHasBalance(Client client, int numBenefitsForMonth, int numUsedBenefits)",,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,targetPosition,visitedPositions,mazeMap,,,,,,,,,,,,,,usedBenefitsCount,minAccumulatedTarget,currentBenefitsCount,,,fullTimeHours,extraTimeWage,currentState,,,,,,,,,,"stillHasBenefits(int totalBenefits, int usedBenefits)",printBoard(boardMatrix currentBoard),,
_size,,,,,,,,,,,,,cheese_location,visited,board,,,,,,,,,,,max_benefits_per_month,price_level,NumOfBenefits,,,,,board,,,"check_enough_space(File f, size_t size, size_t cur_free_space)",,"can_produce(biscuits, cups, paper)",,,,,"bool calc_benefit(numOfBenefitsEntitled , numUsedBenefits)",print_board(),,
,,destination_floor,current_floor,diff_floor,door_state,,,,,,,,,,,,,,,,game_time,bombs_state,,,,,,,,,,,,current_state,,,,,,,"get_challenge_state(int rows, int cols, int num_bombs)",,,,display_board(boolean[][] board),
size,,,,,,,,,,,,,,,,,,,,,,,maxBonusPerMonth,bonusSpendingLimit,monthBonus,,,,,,maxHoursPerWeek,extraHoursRate,,boardStatus,,"boolean reallocate(FILE file, int bytesToAdd, int availableBytes)",,"int potentialCookies(int chocolateBiscuits, float vanillaIcecream, int[] wrappingPaper)",,,,"boolean isBonusAvailable(int monthBonus, int monthSpentBonus)",,,void printTable(Table table),
,size_in_bytes,,,,,,,,,,,,,,,,,,,,,mines_mat,,,,BENEFIT_MAX_NUM,ILS_TO_BENEFIT,number_of_benefits_to_grant,,,OVERTIME_REACHED_THRESHOLD,overtime_rate,,,,,"bool is_enough_space_to_increase_file_size(file, size_to_increase, space_available_on_disk)",,,,"int calculate_difficulty_level(board_width, board_height, num_of_mines)",,"bool does_user_has_more_benefits(number_of_benefits_to_grant, number_of_benefits_used)",,,
,,,,,,,,,,,,,,,,Current_cheese_location,Already_has_been,Maze,,,,,,,,MaxBenifits,n_benifit_point,n_current_benifits,n_weekly_hours,n_overtime_salary,,,,bIsTripleX,,,,,,,,,"Bool IsBalancePositive(int deserved, int used)",,GetBoard(),
,m_fileSize,dstFloor,srcFloor,delta,status,,,,,curLoc,visited,Matrix,,,,,,,,,timer,Board,,,,,,,,,BASE_RATE,Extra,,,,,"Bool isEnoughSpace(File f, unsigned int enlarge, unsigned int available)",,"int amount(int biscuits, int ic, int paper)",,"int getLevel(unsigned int width, unsigned int height, unsigned int bombs)",,,,,
long _fileSize,,,,,,,,,,,,,,,,,,,,,TimeSpan _elapsedTime,SquareInfo,,,,,,,,,,,CurrentBoardStatus,,,"bool CanFileBeEnlraged(string fileName, int sizeToEnlarge, int freeSpace)",,,"int CalculateAmountOfCasata(int numOfBiscuit, int amontOfMilk, int paperLength, int paperWidth)",,"int CalculateDifficulty(int boardRows, int boardCols, int numOfMines)",,,DisplayCurrentBoardStatus(),,
size,,,,,,,,,,currentLocation,roomsVisited,maze,,,,,,,elepsedTime,GameBoard,,,,,,,,,,,,,board,,,"addToFile(File file,int sizeToAdd,System system)",,,,"checkDifficulty(int boardSize, int numberOfMines)",,,,,,
,,request_floor,curr_floor,floors_diff,door_state,,,,,,,,,,,cheese_loc,trace_map,maze,,,curr_time,pannel,,,,,,,,,,,,curr_board,,,,,,,"int create_game (int width, int height, int num_mimes)",,,,draw_board(Board board),
,,target_floor,current_floor,diff,door,,,,,,,,,,,,,,,,turn,danger,,,,,,,,,,,,,,,,,"cassette(biscuits, icecream, wrap)",,"difficulty calculate_difficulty(size, mines)",,,,,
,fsize,,,,,,,,,,,,,,,,,,,,,,,,,max_benefits_per_month,benefit_value,cntBenefits,,,,,,cState,,,"is_realloc_ok(newsize,available)",,,,,,"def is_balance_positive (nBenefits_Month,nBenefits_Used): return nBenefit_Month-nBenefits_Used>0",,display_state(cState),
,file_size,,,,,target_floor,current_floor,floors_to_climb,is_open,,,,,,,cheese_position,passed_path,maze,,,,,,,,MAX_NUMBER_OF_BENEFITS,AMOUNT_NEEDED_FOR_BENEFIT,benefits_entitlement_current_month,,,,,,,,,"check_availability (File file_to_expand, int expansion_size, int free_space)","number_of_sandwiches (int number_of_biscuits, int cups_of_ice_cream, int wrapping_paper_in_square_meters)",,,,,"has_benefits(int benefits_entitlement, int benefits_used)",,,
,,,,,,,,,,,,,,,,,,,,,,,,,,MAX_BENEFITS_PER_MONTH,ILS_PER_BENEFIT,current_month_benefits_count,FULL_TIME_WEEKLY_HOURS,overtime_rate,,,,currentBoardState,,,,,int numCasataPossible(Inventory inventory),,,,has_available_benefits,,displayBoard(Board board),
,fileSize,,,,,desiredFloor,currentFloor,floorDiff,doorState,dailyLocation,traversedLocations,totalLocations,,,,,,,,,,,,,,ACCUMULATION_MONTH_LIMIT,BENEFIT_RATE,curBalance,BASE_WEEKLY_HOURS,overtimeHourlyWage,,,,,,,"public boolean checkSpace(MyFile file, int requiredSpace,int freeDiskSpace)",,,,,,"public boolean isEligible (benefitsBalance,usedBenefits)",,,
Size,,,,,,,,,,,,,,,,,,,Time,Cell,,,,,,,,,,,,,,,,IsEnoughSpace,,CalcQuantity,,GetGameDiffucult,,,,,,
,,,,,,,,,,,,,,,,,,,,,Life_time,Matrix,Gift,Account,Current_gift,,,,,,,,,Matrix,,,,,"Int casatas_number(int biscuits, double vanilla, int paper)",,"Int rank(int a, int b, int m)","Boolean difference (int gifts, int used_gifts)",,,Char[][] display_matrix(),
fileSizeInKB_,,,,,,,,,,,,,,,,,,,,,elapsedTimeInSec,boardConfig,,,,MAX_MONTHLY_BENEFITS,BENEFIT_AMOUNT_ILS,currentMonthBenefits,,,,,,,,,,,,,"getDifficultyLevel(minesAmount, width, height)",,HasSufficientBenefits,,,
,,,,,,requested_pos,current_pos,delta_pos,door_open (boolean),,,,,,,maze.cheese_pos,mouse.track,maze,,,elapsed_time,mines_num,,,,,,,,,,,board,,,,,,"ice_cream_units(int biscuits_num, int ice_cream_cups, int wrapper_length, int wrapper_width)",,"int level(int area, int total_mines)",,,board.display(),,
size,,,,,,requestedFloor,currentFloor,deltaRequestVsCurrent,elevatorDoorState,,,,cheeseLocation,visitedTree,labyrinthTree,,,,,,,,maxNumOfBenefits,triggeringAmount,numOfBenefits,,,,maxWeeklyHours,hourlyOverTimeWage,,,,,,"public boolean canResizeFile(file, newFileSize, freeDiskSpace)",,,,,,"public boolean hasValidBenefits(int numOfBenefits, int consumedNumOfBenefits)",,,,
fileSize,,targetFloor,currentFloor,floorsToTravel,doorState,,,,,,,,,,,,,,,,,,,,,,,,FULL_TIME_WEEKLY_HOURS,FULL_TIME_HOURLY_OVERTIME_PAY,,,,BoardState,,"int checkFileExpansion(File* file, int expansionInBytes, int freeDiskSpace)",,,,,,,,,void displayBoard(),
size,,,,,,currentFloor,destinationFloor,floorDistance,"isOpened un cases that the state is Boolean, doorState otherwise",,,,,,,,,,,,,,maxMonthlyGifts,giftCost,giftsNum,,,,,,weeklyHoursQouta,extraHoursBonus,,,,hasSpace(space) - לשאלה מי הקובץ אין קשר לשאלה האם יש מקום והקובץ לא צריך להיות בחתימה. אם הקובץ מחוייב ניתן להוסיף את שמו,,,"integer max_kasatas(integer biscuits integer iceCream, intger papaer),",,,"bool can_use_gift(integer giftsWon, integer giftsUsed)",,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Val,HoyrlyWage,,,,,GameState,,,,calculateCassateNum,,,,,,,displayGrid ()
,,,,,,,,,,current_place,VisitedRooms,Maze,,,,,,,,,,,,,,,,,BASE_SALARY_HOURS,OVERTIME_RATE,,,,GameState,,,,"calc_sandwich_num(biscuits, icecream_cups, wrap_paper)",,,,,,,show_board(),
fileSize,,,,,,,,,,,,,currentCheeseLocation,visitedLocations,Maze,,,,,,gameDuration,MinesweeperBoard,MAX_TREATS,MIN_SPENDING_FOR_TREAT,currentPeriodTreats,,,,,,,,,,,"boolean canEnlarge(File file, long freeSpace, long increase)",,,,,"Difficulty evalueDifficulty(int boardWidth, int boardHeight, int numMines)","boolean hasAvailableTreats(int gainedTreats, int usedTreats)",,,,
,size,,,,,new_floor,curren_floor,floors_to_move,is_opened,,,,curren_location,locations_tried,available_locations,,,,,,,,MAX_POINTS_FOR_MONTH,MONEY_NEEDED_FOR_POINT,current_points,,,,,,,,Board,,,,"can_increase_file(file, size_to_@dd, availabl_space)",,,,,"can_use_points(points_have, points_to_use)",,print_board(Board board),,
,,,,,,,,,,,,,,,,,,,,,GameTimer timer,GameSquareMinesInProximity :),,,,,,,,,,,TTTBoardState,,,,,,,,"public double getGameLevel (int boardWidth, int boardHeight, int numMiness)",,,"public void displayBoardState (TTTBoardState state, Player player)",,
,file_size,,,,,,,,,,,,current_cheese_location,"rooms_visited (room_name, is_visited)",labyrinth_structure,,,,,,,,,,,MAX_BENEFITS,BENEFIT_BREAK,current_benefits,HOURS_FULL_TIME,overtime_wage,,,,,,,"bool TestAvailableSpace(file, size)","int SandwichAmount(biscuits, vanilla, wrapPaper)",,,,,"CanUseBenefit(total_benefits, used_benefits)",,,
,,,,,,var1=designatedFloor,var2=currentFloor,var3=numOfFloorsToGo,doorState,,,,,,,,,,,,timeAccumulated,mineMap,,,,C_benefitsPerMonth,C_EntitlingSum,currentMonthBenefitsCount,C_weeklyWorkHours,overtimeRate,,,,,gridState,,,,,,"difficultyLevel(width, height,minesNumber)",,"benefitsCurrentBalance(currentMonthBenefitsCount, currentMonthUsedBenefitsCount)",,,displayGrid()
size,,original_floor_index,designated_floor_index,floor_delta,is_door_open,,,,,,,,cheese_location,locations_visited,labyrinth_data,,,,,,,,,,,,,,,,,,,,game_grid,"check_if_extending_file_is_possible(file, new_file_size, disk_free_space)",,,,,,,,,,display_game_grid(game grid)
,file_size,,,,,new_floor,curr_floor,floor_diff,bool door_open,,,,,,,curr_cheese_location,visited_locations,maze,,,,,,,,,,,,,,,,tic_tac_toe_board,,,possible_to_increase_file_size,,,,,,,,display_board(mat board),
,,,,,,destination_floor,curr_floor,num_floors_to_move,door_state,,,,cheese_location,areas_already_visited,labyrinth_areas_graph,,,,GameTime: realNumber,MinesInfoMap,,,max_number_of_treats,treat_price,current_number_of_treats,,,,,,workhours_per_week,overtime_hour_rate,,,,,,,,"returnGameLevel(gridsize: INT, mines: array[ [mineSize: INT, number_of_occurences : INT ]]",,"get_available_treats(current_number_of_treats: INT, used_treats: INT): BOOL",,,,
,,,,,,,,,,,,,,,,,,,,,,,MAX_MONTH_PINUKIM,MIN_PAY_FOR_PINUK,numOfPinukim,,,,,,,,,,GameBoard,,,,,,,boolean canGetPinuk(num,,,,Display ()
,,,,,,input_floor,current_floor,floors_diff,is_closed,,,,,,,,,,,,game_duration,is_bomb,,,,,,,REQUIRED_HOURS,overtime_rate,,,,,,,,"calculate_how_many_sandwiches(biscuits, ice_cream_cups, papers)",,,"get_diificulty(border_size, bombs_num)",,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Weekly_hours,Extra_time_additional_rate,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,board,,,,,,,,,,,display_board(int [] [] board),
,,,,,,dest,currentPlace,distance,isOpen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,amountCanBeMade(),,,,,,,
,,,,,,target_floor,current_floor,number_of_floors_to_climb,is_open,,,,,,,,,,,,elapsedTime,MineField,,,,,,,,,,,board,,,,,,,,"analyzeToughness(int height, int width, int numberOfMines)",,,drawBoard (Board board),,
,,destFloor,currFloor,diffFloors,Bool isOpen,,,,,,,,,,,,,,,,Long duration,Int mineOrAdjCount,,,,maxBenefits,benefitValue,numBenefits,,,,,,,,,,"Int calcQuantity(int numBiscuits, int numVaillaCups  int paperLength, int paperWidth)",,,"Int difficulty(int numMines, int boardsWidth, int boardHeight)",,Bool isEligible(string customerId),,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,השאלה לא ברורה,,,,,,,
,,enterd_floor,curent_floor,move_floors,DoorIsOpen,,,,,cheese_posion,visited,maze,,,,,,,,,,,max_pinukim,min_many_for_pinuk,num_pinukim,,,,,,,,,,game_screen,,,"how_many_sandwiches(biscuits,cups of ice cream, higth paper, wigth paper)",,,,"boolian isHavePinukim(num_pinukim,num_pinukim_done)",,,,display_game(game_screen)
fsize,,dest_floor,curr_floor,floor_diff,is_door_open,,,,,,,,,,,,,,timer,mine_data_grid,,,,,,MAX_ACC_BENEFITS,MAX_BENEFIT_VALUE,curr_month_benefits_amount,,,max_noramal_rate_hours,overhour_rate,,,,"boolean is_resizeable(long f_size, long disk_size)",,,,"int difficulty(int grid_width, int grid_height, mines_count)",,,"boolean is_entitled(int curr_month_benefits, int used_benefits)",,,
,,destFloor,currFloor,velocity,isDoorOpen,,,,,,,,,,,currLocationCheese,visitedCells,maze,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,m_nSize,,,,,nDstfloor,nCurrentFloor,nNumOfFloorsToMove / nDeltaFloor,bIsDoorOpen,,,,,,,,,,,,,,MAX_GIFTS_PER_MONTH,CREDITS_PER_GIFT,nGiftsInCurrentMonth,,,,,,,,,,,,"No need for such function. The function does not need the file argument. If we insist then: CanFileBeEnlarged(cFile, nAdditionalFileSize, nAvailableDiskSpace)",,,,,"bool UseGife(nGiftsInCurrentMonth, nGiftsUsed)",,,,
,size,,,,,,,,,,,,,,,,,,,,,,MAX_PINUKIM,PINUK_WORTH,num_pinukim,,,,,,,,Board,,,,"expand_file(int add_size, int size_left)",,,,,"boolean is_pinuk_allowed(int total, int used)",,show_board(char[][] board),,
,,,,,,,,,,,,,current_cheese_location,rooms_visited,maze,,,,,,,,,,,,,,HOURLY_WAGE_PAY_INCREASE_THREs,SHOLD,,,,,,,,,,,,,,,,
,,,,,,targetFloor,currentFloor,distance,doorState,,,,,,,currentCheeseLoc,visitedRooms,Maze,gameTime,grid,,,,,,,,,,,,,,,,,,,,"int getDifficulty(int height, int width, int numMines)",,,,,,
,file_size,new_location,current_locarion,number_of_floors_to_move,is_door_open,,,,,,,,cheese_loc,checked_locs,labyrinth,,,,,,,,,,,,,,,,,,,,,,can_file_size_be_increased,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Status,,,,,,,,,,,"Bool draw(const Board* b,const unsigned int N, const unsigned int M)",
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,currentGameState,,,,,,,,,,,show_grid(currentGameState)
,size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"bool increase(File file, int increaseBy, int availableSpace)",,,,,,,,,
,file_size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,gameboard_state,,,Check_if_increase_possible,,,,,,,,display_state(gameboard_state),
,,,,,,,,,,,,,Target,,Labyrinth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,currLocation,locationHistory,maze,,,timeLeft,gameBoard,maxTreatsPerMonth,singleTreatCharge,eligibleTreatsCurrMonth,,,,,,,,,,,,,,,,"getDifficulty(width,length,mineCount)",hasMoreTreats,,,,
,,desiredFloor,currentFloor,floorsToMove,isDoorOpen,,,,,,,,,,,,,,,,,,,,,MAX_NUMBER_OF_BENEFITS,expense,nBenefitsEntitled,,,,,,,,,,"int HowMuchIcecreamCanIMake(float nBiscuits, float nOfCups, float area)",,,,,,,,
,,,,,,,,,,,,,,,,,,,GameTime,Cell,,,MaxBenefitsPerMonth,AmountPerBenefit,CountBenefits,,,,,,,,,,game,,,,,"GameDifficulty GetGameDifficulty(int rows, int cols, numberOfMines)",,"bool CheckQuota(int benefits, int amountNeeded, int amountUsed)",,,,void DrawGrid()
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,MfileSize,RequestedFloor,CurrentFloor,FloorDelta,IsDoorOpen,,,,,,,,,,,,,,,,MgameElapsedTime,MCellState,,,,,,,,,,,,MBoard,,,"CheckFileIncrease(file,newSize,spacer)",,,,"GetDifficulty(height,width,mines)",,,,DisplayBoard(step),
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,size,,,,,,,,,,,,cheeseLoc,cheeseLocPast,labyrinth,,,,,,timer,boardProerties,,,,benefitsLimit,LowBoundILS,numOfBenefitsAllowed,,,,,,boardState,,,"canIncreasw(file f,int space)",,"calcNumOfCaset(int shokoBis,float Canul, list paper)",,"gameLevel(int dimBoard, int numMokesh)",,canUseBenefit(user u),,boardDisplay(list boardMat),
,,desiredFloor,currentFloor,floorsToGo,isDoorClosed,,,,,targetLocation,visited,maze,,,,,,,,,timeElapsed,minesMap,,,,BENEFITS_ACCUMULATED_LIMIT,ILS_PER_BENEFIT,benefitsBalance,,,,,,,,,,,,,"public static DifficultyLevel getDifficultyLevel(int boardSize, int minesCount)",,"boolean hasRemainingBenefits(int startingBalance, int amountUsed)",,,
,File_size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"Increase_size(File file, int size_increase, int available_space)",,,,,,,,,
,dFileSize,,,,,,,,,locCheeseLocation,"lstVisitedRooms (אפשר לחלק את המבוך ל""חדרים"" ו""מעברים"" ולשמור אותם. כל ""חדר"" הוא מבוי סתום).","mzMaze. שמכיל את מיקום הגבינה, מיקום העכבר הנוכחי, רשימת החברים שהעכבר ביקר בהם. ועץ החדרים(/מעברים). חדרים הם data structure קצת יותר מורכב אם לא מדובר במבוך עם מעברים מלבניים.",,,,,,,,,,,,,,MAX_BENEFITS_PER_MONTH,PRICE_FOR_BENEFIT,nEntitledBenefits,,,,,,,"למה החלק הזה של השאלון באנגלית? לא אוהב כל כך את ההתייפיפות סביב ישראלים בישראל שמדברים אנגלית, במגזר ההייטק... לא מסתדר לי אידיאולוגית. לעניין השאלה: קלאסי לממש מטריצה (מערך של מערכים) שמכיל enums של: ריק, איקס, עיגול",,"bool IsEnoughSpaceForFileEnlarge(File file, double dNewSize, FileSystem fsFileSystem). כמובן שבתרחיש כזה לא מספיק לדעת *כמה* מקום פנוי יש על הדיסק, צריך גם לדעת כמה מקום פנוי רצוף יש על הדיסק. ה-FileSystem כבר ינהל איפה לשים את הקובץ. אם הייתי מקבל פרמטר כמה מקום פנוי רצוף הכי גדול יש על הדיסק, לא הייתי צריך פונקציה כדי לממש את הבדיקה הזו. בשורה אחת הייתי בודק. את הקובץ עצמו צריך רק כדי לחשב את המקום הפנוי הכי גדול על הדיסק כולל המקום של הקובץ הנוכחי, כמובן.",,"int NumofCasetsFromIngredients(int nBiskwits, dIceCreamAmount, nShellWidth, nShellHeight)",,,,"bool IsEnoughBenefitsLeft(int nEntitledBenefits, int nUsedBenefits)",,,"התצוגה בדרך כלל רצה ב-thread נפרד, כך שפעולה שמתבצעת לא תתקע את ה-GUI. אם אני שומר את מצב הלוח במטריצה של enums, אז הייתי משתמש ב-updateBoardPresentation(matrix) כדי לעדכן את תצוגת הלוח."
32,,,,,,,,,,,,,coordinate-to-find,visited-coordinates,all-coordinates,,,,,,,,,,,,,,,,,,,,,"reallocate-file(file, add-size, free-memory)",,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,MAX_BENEFITES_PER_MONTH,AMOUNT_PER_BENEFIT,current_month_benefits_count,,,,,,,gameBoard,,,"int getNumOfSandwiches(int biscuits, int iceCreamCups, int wrappingPaperWidth, int wrappingPaperHeight)",,,,,"boolean canUseBenefit(int totalBenefits, int usedBenefits)",,,displayBoard(board)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,destination_floor,current_floor,destination_offset,door_stat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,gameTimer,numberOfMines,,,,,,,,,,,FULL_TIME_JOB_RATE,ADDITIONAL_TIME_RATE,,,,,,,,"public int getDifficulty(int gridSize, int numOfMines)",,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,__size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"check_available_size(file, size)",,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,Total_time,Map_of_bombs,,,,,,,,,Hours_for_week,Bonus_for_hour,,,,,,,,,Int get_level(int size) - ללוח ריבועי..אם לא ריבועי אז 2 פרמטרים,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,i_dest_floor,i_src_floor,i_delta_floor,b_elevator_door_state,,,,,,,,,,game_time,num_of_mines,,,,,,,,,,,,,,,,,,,,"Int level(int grid_size, int num_mines)",,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,size,,,,,,,,,,,,,,,,,,,,,,,,,MAX_BENEFITS_NUM,ILS_TO_BENEFIT_RATE,currentNumBenefits,,,,,,state,,,"IsValidSizeIncrease(File file, int increaseSize, int availableSize)",,"calcAmountOfPossibleCasatot(int biscuits, double iceCreamGlasses, int wrappingHeight, int wrappingWidth)",,,,"getBenefitBalance(int numEntitledBenefits, int numUsedBenefits)",,displayBoard(Board state),
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2 dimensional array,,,,,,"int getNumProducts(int bisc, double vanillaCups, double wrappingPaperLen, double wrappingPaperWid)",,,,,String display(),,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Board,,,,,,,,,,,display_board(board),,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CurrentBoard,,,,,,,,,,,PrintBoard(Board board),,
,,,,,,,,,,cheese_location,rooms_visited,maze,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,selectedFloor,currentFloor,floorsDelta,doorState,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,target_floor,current_floor,delta_of_floors,status_of_door,,,,,,,,cur_cheese_loc,visited_rooms,labyrinth,,,,,,,,,,,max_benefits,benefit_entitlement,accumulated_benefits,,,,,,,current_board_status,,,,"units(biscuits, ice_cream, paper)",,,,"use_benefit(accumulated_benefits, used_benefits)",,,"display_board(current_board_status, turn)"
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,calcNumberSandwichesPossible,,,,,,,,
,,,,,,,,,,,,,,,,,,,Timer,,,,,,,,,,,,,,,,,,,,,Return size*num,,,,,,
,,target_floor,current_floor,num_floors_to_move,door_state,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,randCheeseLoc,allreadyVisited,maze,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,destinationFloor,currentFloor,numberOfFloors,isDoorClosed,,,,,,,,,,,,,,,,,,,,,,,,,,grid,,,,,,,,,,,)grid.draw)
,,ChoosenFloor,CurrentFloor,NumberOfFloorToGo,DoorStatus,,,,,,,,,,,,,,,,,,,,,,,,,,,,Board or matrix,,,,,,,,,,,Show board מחזירה מערך דו מימדי של char,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,game_state,,,,"how_many_caste(bisk,vainl,rap)",,,,,,,print_game(game_state)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Max_monthly_work_hours,Overtime_hourly_rate_addition,,,,,,,,,,,,,,
,,targetFloor,curFloor,floorsToMove,doorState,,,,,,,,,,,cheesePos,visitedRooms,roomsGraph,,,,,maxRewardsPerMonth,rewardPrice,curNumRewardsAvailable,,,,,,,,boardState,,,,,"nt wrapWidth, int wrapLength)int numSandwitchesPossible(int biacuits,int iceCream,i",,,,,,BoardState getBoardState(),,
file_size_,,,,,,,,,,Target,Trail_history,Maze,,,,,,,gwme_duration,MinesPerSquare,,,,,,,,,,,Additional_hours_treshold,aditional_hours_rate,,,,_increase_file_size_by,,"get_posibble_quant_of_biscuits(chock, vanila, wrap)",,"get_difficalty(size, num_of_mines)",,,,,,
file_size,,,,,,,,,,cheese_location,rooms_history,maze_descriptor,,,,,,,,,,,,,,,,,MAX_HOURS_WITHOUT_OVERTIME,OVERTIME_RATE,,,,,board_state,"checkForSpace(file, size_to_increase, available_space)",,,"num_of_icecream(num_of_biscuits, cups_of_icecream, wrapping_length, wrapping_width)",,,,,,,display_board(current_state)
,,,,,,,,,,,,,cheeseCoordinates,visitedRooms,labyrinthGraph,,,,t,gameMat,,,maxMonthlyTreats,treatCost,numOfTreats,,,,,,,,,matState,,,,,"CalcQuantity(biscuits,iceCreamCups,paperLen,paperWidth)","squareArea, numOfmines)ComplexityLevel)",,IsEntitled,,,PrintMatState(matState),
fileSize,,,,,,,,,,cheeseLocation,visited,maze,,,,,,,gameTime,grid,,,,,,,,,,,,,board,,,"bool checkIfAvailableSpace(File file, int increaseSize, int currentlyAvailable)",,,"int howManyCasets(double numOfBiscuits, double numOfVanilleCups, double numOfPapers)","int difficultyLevel(int gridHeight, int gridWidth, int numOfMines)",,,,"void showGameBoard(Board board, int playerId)",,
,,,,,,desirableFloor,currentFloor,numOfFloorToMove,currentDoorsState,,,,,,,,,,timeLeft,mineValueAssigner,,,,,,private static int MAX_BENEFITS_PER_MONTH = 4;,private static int MONEY_FOR_BEFIT = 2000;,private int currentMonthBenefitsNum;,,,,,,,,,,,"calcNumOfCasatas(numOfBiscuit, icecreamCups, paper);","public static int calcLevel(int gridSize, int numOfMines);",,,"private static boolean isCanUserUseBenefit(int thisMonthBenefits, int usedBenefits);",,,
,,,,,,,,,,cheeseLocation,locationsVisited,maze,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,Currentlevel,Inputlevel,Diff,Doorstate,,,,,,,,,,,,,,Elapsed_time,Grid,,,,,,,,,,,,,,Board,,,,,,"Int difficulty(grid_w, grid_w, num_mines)",,,,,Print_board,
fileSize,,,,,,destinationFloor,currentFloor,floorsDifference,isElevatorOpen,,,,,,,,,,,,current_game_time,board_values,,,,,,,,,,,,,,"checkSizeAvailable(file, sizeToAdd)",,"calculate_max_sandwitches_for_ingredients(num_biscuits, vanilla_ice_cream_cups, num_wrapping)papers)",,,"get_game_difficulty(board_size, num_mines)",,,,,
file_size,,destination_floor,cur_floor,how_many_to_move,door_state,,,,,,,,,,,,,,game_timer,cell_data,,,,,,,,,,,,,,game_state,,"resize_file(file,resize_to,open_space_in_disc)",,how_many_can_make(),,"difficult_level(grid_size,num_of_mines)",,,,,display_noard(board),
,,,,,,pressed_floor,current_floor,floor_delta,door_state,,,,,,,,,,,,game_time,cell_data,,,,,,,,,,,,,,,,,"calculate_ics(biscuits, ice cream, paper)",,"get_board_difficulty(width, height, mines)",,,,,
,,,,,,dest,curr,num_of_flights,door_state,,,,cheese_loc,visited,labyrinth,,,,,,,,,,,,,,FULL_TIME_HOURS,hourly_wage,,,,game_board,,,,,"castas_num(bisquits_num, icecream_amount, paper_size)",,,,,,display(game_board),
file_size,,Button_floor,elevator_floor,dist,door_is_closed,,,,,,,,,,,cheese_loc,visited,Maze,,,dur,cell_val,,,,,,,,,,,,,,"is_expandable(file, expansion_size, space)",,,"cassette_cap(biscuits,ice_cream,wraps)",,"difficulty (dim, num_mines)",,,,,
,fileSize,,,,,,,,,,,,,,,,,,,,,,maxPinukimPerMonth,minCashToPinuk,aquiredPinukim,,,,,,FULL_JOB_HOURS,extraPaymentPerAdditionalHour,,,,,"boolean tryToIncreaseFile(File file, double additionalSize, double emptySpaceOnDisc)","int maxNumSandwitches(int biscuits,int cupsVanila,int numpapers)",,,,"boolean canUsePinuk(int pinukimMayUse, int pinukUsedAlready)",,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,MAX_BENEFITS,ONE_BENEFIT,numBenefits,weeklyHours,OVERTIME_PAY,,,,,state,,,,,,,,"calcBenefits(entitled, used)",,,printState
,,requestedFloor,currentFloor,floorsToMove,doorStatus,,,,,CurrentCheeseLocation,MouseVisitedLocations,Universe,,,,,,,clock,theBoard,,,monthly_treats_limit,expenses_treats_ratio,monthly_treats_limit,,,,,,full_position_threshold,extraHourRate,,,,,,,,"int CalcDifficultyLevel(int gridSize, int numOfMines)",,"bool HasPositiveBalance(int entitledTreats, int usedTreats)",,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fileSize,,,,,,,,,,,,,,,,,,,gameTime,CellsValue,,,,,,,,,,,,,currentBoardState,,,"checkSpaceForFile(file, int)",,,"castesNum(int chocBiskN, int vanIcecreamN, tuple rappingPageSize)",gameDifficulty,,,,printBoard(boardState),,
,,,,,,,,,,,,,CurrentCheeseLocation,LocationsVisited,labyrinth,,,,,,SecondsPlayed,CellValues,,,,,,,,,,,,,,,,,,,"Def gameLevel(boardSize: Int, numOfBombs: Int): Int",,,,,
,,,,,,,,,,,,,,,,currentCheeseLocation,cheeseLocations,maze,,,gameLength,mineBoard,,,,maxBenefits,benefitRate,monthlyBenefits,,,hoursPerWeek,bonusRate,,,,,,,,,"getDifficulty(width, height, numOfMines",,isPositiveBalance,,,
,,,,,,,,,,cheese_location,visited,maze_info,,,,,,,,,,,,,,MAX_BENEFIT_NUM,BILL,NUM_OF_ENTITLED,,,FULL_JOB_HOURS,EXTRA_TIME_RATE_PER_HOUR,,,,,,,calculate_amount_of_casatot(amount_of_Ingredients),,,,IS_BALANCED,,,
,,floor_pressed,current_floor,floors_to_travel,door_status,,,,,current_cheese,visited,maze,,,,,,,,,t,coordinates_info,,,,MAX_BENEFITS,BENEFIT_VALUE,entitled_benefits,,,WORKING_HOURS_FULL,EXTRA_HOURS_BONUS,,,,,,,,,"def difficulty(x, y, n_mines)",,"is_benefits_available(entitled_benefits, benefits_used)",,,
,file_size,,,,,,,,,,,,,,,,,,,,game_time,board,,,,,,,,,,,,,,,"isEnoughSpace(file, increment, free_space)",,,,"getLevel(dimensions, num_of_mines)",,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Public int calculation(int ingredientAmount obString ingredientTypes),,,,,,,,
,,,,,,dest_floor,current_floor,floors_to_dest,is_open,,,,,,,,,,timer,two dimensinal array,,,,,,,,,min_hours,overtime_salary,,,,,,,,,"int numOfIcecreams(int biscuits,int iceream,int wrap){","int difficulty(int n, int num_mines)",,,,,,
,,,,,,requiredFloor,currFloor,floorNum,currState,cheeseLocation,visited,array,,,,,,,,,,,,,,,,,,,FULLTIME,OVERTIME,,currGame,,,,,"amountOfCookies(biscuits, iceCream, wrapper)",,,,,,", Player player2) display_board(Board board, Player player1",
,,,,,,,,,,curCheeseLoc,visitiedLocs,Maze,,,,,,,GAME_TIME,adjecentMines,,,,,,,,,OVERTIME_THRESH,overtimeRate,,,,curBoardState,,,,,,"getDifficulty(int grideSize, int mineN)",,,,,dispBoard(curBoardState),
,,,,,,,,,,,,,where_is_my_cheese,Columbus_was_here,labyrinth,,,,,,play_time,mines_in_square,MAX_PAMPERS_PER_MONTH,MONEY_TO_PAMPER_RATIO,personal_pampers,,,,,,,,,,,,,,"int num_of_kasets(int biscuits, double vanile, int paper_width, int paper_length)",,"int how_hard(int num_of_mines, int rows, int cols)","use_pampers(int usable_pampers, int needed_pampers)",,,,
size,,,,,,,,,,,,,,,,,,,gameDuration,minesMap,,,MaxPrizes,moneyForPrize,clientPrizesNum,,,,,,,,,curGameBoard,,isIncreasingAvailable(),,,,"findDifficulty (gridSize, minesNum)",,"prizeUsingAbility (clientPrizeNum,clientPrizeUsed)",,,drawBoard (curGameBoard),
fileSize,,,,,,,,,,,,,Curr_cheese_loc,Visited,Lab_desc,,,,Gametime,Mines,,,,,,,,,,,Fulltimehours,Additionatimepayment,,,,Is_expandible,,,,"Level(gridsize,mines)",,,,,,
fileSize,,,,,,,,,,curCheeseLocation,visitedLocations,mazeDescriptor,,,,,,,,,gameTimestamp,gameTable,,,,,,,,,WORK_HOURS_FULL_WEEK,extraPayRate,,gameBoard,,"checkAvailableSpace(file, sizeIncrease, availableDiskSpace)",,,"castasAvailable(choclateBiscuts, vanilla, paper)",,"int getDifficulty (int width, int height, int numOfMines)",,,,displayBoard(gameBoard),
,fileLength,,,,,,,,,,,,,,,,,,,,remainingTime,CELL,,,,MAX_ALLOWED_BENEFITS,BENEFIT_COST,currentBenefits,FULL_TIME_JOB,OVERTIME_HOURLY_WAGE,,,,,,,"checkAvailableSpace (File file, long add) returns boolean",,,,"difficultyLevel(int boardSize, int numMines) return enum",,"canUseBenefit(int numEntitlesBenefits, int usedBenefits) return true",,,
,.size,,,,,,,,,,,,,,,daily_cheese_ind,rooms_visited,Maze,g_t,slot_mine_val,,,MAX_BEN,thresh,cur_ben,,,,,,,,Board,,,,check_expansion_legality,,,complexity_level(),,is_alligable,,print_to_screen(board),,
File_size,,,,,,Press_buttom_level1,Press_button_level2,Different_between,Elevator_state,,,,Cheese_room_index,Visited_rooms,Maze_board,,,,TimeOfGame,BoardGame[,,,,,,,,,,,FullJobConstant,ExtraHours,,Current_game_board,,"There_are_enough_space(File file, size_t size ,size_t avilbie _siz)",,,,"DifficultyOfBoard(int rows, int cols,int sizeMines)",,,,,"Display_game_Board(Board game_Board, UserOutput useroutput",
fileSize,,,,,,,,,,,,,,,,,,,,,time,board,,,,max_benefits,MINMUM_ILS,BenefitsPerMonth,,,,,Board,,,"isThereEnoghSpace(file,resize,availableSpace)",,,"casataNumber(biscuits, iceCream, paperSize)",,"gameDifficulty(boardSize, minesNum)",,UseBenefit(benefitsEntitlrd(,toString(Board),,
Size,,Cur_floor,dest_floor,amount_floors,door,,,,,,,,,,,,,,,,,,,,,MAX_BENEFITS,MIN_SHEKELS,cur_benefits,MIN_HOUR,OVER_WAGE,,,,,,Enough _space,,Num_able,,,,,have_remain,,,
,,TargetFloor,CurFloor,FloorDelta,IsOpen,,,,,,,,,,,,,,,,,,,,,Max_benefits,ILSToBenefits,Customer_benefits,Bonus_addition,OverTimeRate,,,,CurBoardStat,,,,,HowManyBisx,,,,AllowToUseBenefits,,PrintBoard(board),
,Size,,,,,,,,,roomWithCheese,visitedRooms,maze,,,,,,,,,GetElapsedTime,Minefield,MaxPinuks,MoneyPerPinuk,AvailablePinuks,,,,,,,,,,,,EnlargeFile(file),,,,"CalculateGameDifficulty(n,m,numMines)",CanUnlockPinuk,,,,
,,,,,,,,,,,,,,,,cur_cheese_pos,already_been_there,maze,,,,,,,,benefits_per_month,min_billing_amount,benefits_number,,,,,,,,,,,,,,,num_of_benefits_is_bigger_than,,,
,,dest_floor,current_floor,gap,isDoorOpen,,,,,,,,,,,cheese_cur_pos,mouse_pos_history,maze,,,,,,,,max_benefits,exchange_rate,current_month_benefits,,,full_time_hours,extra_time_rate,,,,,,"howMany(recipe, biscuits, ice_cream, wrap_paper(",,,,,"boolean isBalancePositive(int current_month_benefits, int used_benefits (",,,
,file_size,requested_level,current_level,levels_to_travel,is_door_opened,,,,,,,,,,,cheese_location,cheese_location_history,maze_coards,game_clock,game_board,,,,,,,,,,,,,,,,,can_allocate_extra_disk(int size_to_inc),"predict_yield(biscuits, icecream_cups, wrappers)",,"determine_diff(grid_size, mines_amount)",,,,,,
fileSize,,,,,,,,,,,,,,,,dayleyCheeseLocation,placesSearched,labirint,,,time,gameBoard,,,,,,,,,,,,,,checkForSpace,,,,,gameLevel,,,,,
file_size,,,,,,pressed_floor,curr_floor,dest_floor,door_state,,,,,,,,,,,,,,,,,,,,,,max_hours_per_week,overtime_bonus_per_hour,,,,check_file_allocation(file),,,"casata_amount_per_stock(num_choco, num_vanille, num_paper)",,,,,,,
,,up_threshold,down_tresh,gap_thres,door,,,,,,,,,,,,,,,,,,,,,user_gifts,max_income,month_gifts,,,,,,,game_table,,,,,,,,balnce_calcul,,,show_table
,,next,cur,steps,door_state,,,,,,,,cheese_loc,bad_list,maze,,,,,,,,max_pinuk,pinuk_money,cur_pinuk,,,,,,,,,cur_board,,,,,num_of_casetas,,,pinuk_available,,,print_board,
,size,,,,,,,,,,,,,,,cizz_loc,loc_history,lab,time,mine_status,,,,,,,,,,,,,,,cur,,space_check,,,difficulty_analize,,,,,,"show_board(x_locations, y_locations)"
,,,,,,currfloor,destfloor,deltafloors,bool doorstate,,,,,,,,,,,,,,,,,,,,,,full_time,initialhourlypay,,,,,,,"icecakefactory(biscuit,icecream,rappaper)",,,,,,,
,size,curfloor,nextfloor,direction,door_status,,,,,,,,,,,Cheese_loc_today,visited_rooms,maze,,,,,,,,,,,,,,,,,,,check_availble_spave(size),"calculate_ingridients(biscuits, ice_cream, wrapping)",,,,,,,,
,,UPfloors,currentFLoor,DownFloors,isOPen,,,,,,,,cheeseToday,alreadyVisited,maze,,,,,,,,maxBenefits,isEntitledForBenfit,currentMonthEntitlness,,,,,,,,,,,,,,,,,"isEntitledThisMonth(currentMonthEntitlness,currentMonthUsed)",,,,
,,,,,,,,,,,,,,,,,,,,,timer,mine_field,,,,,,,reg_rate,holiday_rate,,,,board,,,,"sandwich_potential(biscuits, ice_cream_cups, wrap_h, wrap_w",,,get_game_dificulty_level(),,,,print_board(board),
,,newFloor,currentFloor,floorsChange,doorState,,,,,,,,,,,cheesePlace,visitedPlaces,Maze,currentTime,GridScore,,,,,,MAX_BENEFITS_PER_MONTH,MONTHLY_BILL_TO_EARN_BENEFIT,benefits,,,,,,board,,,,,,"int gameDifficulty(int gridSize, int minesNumber)",,,"bool canUseBenefit(entitledBenefits, usedBenefits)",,void displayBoard(Board board),
,,,,,,floorToReach,currentFloor,floorsToMove,isDoorOpen (a boolean variable),,,,,,,,,,,,timeOfGameSoFar,board,,,,,,,FULL_TIME_POSITION_HOURS,payForOvertime,,,,,,,,"maxNumOfSandwiches(numOfBiscuits, cupsOfVanilla, wrappingPaper)",,,"levelRate(sizeOfBoard, numOfBoms)",,,,,
,,,,,,,,,,,,,,,,,,,,,game_timer,mine_status,,,,,,,FULL_TIME_CAP,OVERTIME_WAGE,,,,,grid,,,,"def how_many_kasata(int biscuits, ice_cream, wrapper)",,"difficulty(height, width, mines_count)",,,,,draw_grid(grid)
,Size,,,,,,,,,,,,,,,,,,,,,,,,,לא יודע,לא יודע,לא,Weekly houres,Hourly wage,,,,,,,Increase,,,,,,לא יודע,,,
size,,,,,,,,,,,,,,,,,,,,,,,,,,MAX_BENEFITS_PER_MONTH,MIN_BENEFIT_SUM,currentMonthBenefitsEntitled,capHoursCount,overtimeHourWage,,,,,,"expandFile(file, availableSpace)",,,,,,,"canUseBenefit(currentMonthBenefitsEntitled, currentMonthBenefitsUsed)",,,
,fileSize,,,,,,,,,cheeseLocation,visitedLocation,maze,,,,,,,gameTime,GridStructure,,,,,,Max number of benefits,ratio of money to benefit,available benefit,,,,,,,,,"public boolean isEnouthSpace(File file,int inc,int space)",,,"public int chooseDifficulty(int gridSize,int numberOfMines)",,,"public boolean useBenefit(int request , int used)",,,
file_size,,,,,,,,,,,,,cur_location,prev_location,labyrinty,,,,,,,,pinuk_counter,last_month_credit,avilable_pinulks,,,,,,,,,,,"is_avilable(file_name,new_size,disk_avilable_place)",,,"kasta(biscuit,ice_cup,wrapping_paper)",,,"check_pinuk(get,used)",,,,
,,,,,,requestedFloor,currentFloor,diffFloors,doorState,,,,cheeseCoords,visited,labyrinth,,,,,,,,,,,,,,,,fullTimeHours,overTimeRate,,,,,,"ingrediantsToCookies(int bis, int haldIceCreamCup, int wrapWidth, int wrapHeight)",,,,,,,,
size_in_bytes,,,,,,,,,,,,,,,,current_target_room,visited,maze,,,,,max_treats_per_month,treat_cost,gained_treats,,,,,,,,,current_state,,,,"def how_many_sandwitches(b, v, p)",,,,"def is_remaningt_treat (gained, used)",,,plot (current_state),
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,list,,,,,,,,,,,display(list a),,
,,,,,,,,,,currentCheeseLocation,visited,maze,,,,,,,,,gameTime,mineNumber,,,,,,,raiseInfimum,raisePayment,,,,,ticTacToeBoard,,,,,,gameDifficulty,,,,,printGame(ticTacToeBoard)
,,,,,,,,,,,,,,,,,,,,,timer,board,,,,,,,,,,,,,,,,,"amountOfKasates(numOfBisquits, amountOfIcecream, heightPlastic, widthPlastic)",,"getDifficulty(width, height, numOfMines)",,,,,
,size,,,,,destinationFloor,currentFloor,floorDiff,isDoorOpened,,,,,,,,,,,,DateTime startedTime // Holds the starting time of the current game,GameCell,,,,MONTHLY_BENEFIT_LIMIT,BENEFIT_THRESHOLD,entitledBenefits,,,,,CorssBoard,,,,"private boolean canAdd(File file, int dataAmount, int freeDiskSpace)",,,,"Level calculateLevel(int boardSize, int minesNumber)",,"boolean hasBenefits(entitledBenefits, usedBenefits)",public void printToConsole(),,
,size,destinationFloor,currentFloor,numberOfFloorsToMove,doorCurrentStatus,,,,,,,,room curCheeseRoom,bool visited,room[] Rooms,,,,,,,,,,,,,,,,FULL_JOB_HOURS,ADDITINAL_HOUR_RATE,board,,,,"attemptToIncrease(file, newSize, availableSpace)",,,,,,,displayBoard(player),,
size,,,,,,up_buttons,down_buttons,floors_num,Door_state,,,,,,,,,,,,,,,,,,,,,,45_extra,extra_salary,,,,check_enough_memory,,"int can_produce(int biscuits, int ice_cresm, int paper)",,,,,,,,
,,,,,,Floor_to,Floor_from,Floors_diff,Is_door_open,cheese_loc,visited_locs,Maze,,,,,,,,,,,,,,Max_benifits_amount,ILS_FOR_BENIFIT,Client_benifits_count,,,,,,,,,,,"Int calculate_kasetas_units(int biscuits, int ice_cream_in_mil, int baking_ppr_w, int baking_ppr_h)",,,,Bool is_eligible_for_benifit,,,
,,,,,,,,,,,,,,,,,,,,,Cur_time,Cell_info,,,,,,,,,,,,,Grid_state,,,"Def calc_sandwiches_num(biscuits, icecream, paper)",,,Get_game_level,,,,,Display_grid(user_id)
,,,,,,,,,,,,,cheeseLoc,visitedLocs,labyrinth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,_size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"isAvailable(file, toAdd, avail)",,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Size,,,,,,,,,,,,,,,,,,,GameTime,,,,Numpinooks,Pinookcap,Availablepinook,,,,,,,,,,,Canwritefile(file),,,,"Difficulty(gridsize, nummines)",,Canusepinook,,,,
,,,,,,,,,,,,,currentCheeseLocation,listOfVistedLocation,cheeseTree,,,,,,,,,,,NUM_OF_POSSIBLE_BENEFITS,SUM_TO_BENEFIT,CURRENT_BENEFITS_NUM,,,,,,,,,,,,,,,"private boolean legableForBenefit (currentNumBenecits, usedBenefits)",,,
,,,,,,,,,,,,,,,,,,,,,gameTimestamp,boardMatrix,treat,treat_th,max_treat,,,,,,,,,,,,,,,,getLevel(int dim),treat_diff,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,MaxNumOfBenefits,ValueOfBenefit,NumofBenefits,,,,,,,,,,,,,,,"Boolean CheckHaveBenefits (int entitledbenefits, int usedBenefits)",,,
,,,,,,,,,,,,,,,,Cht,Chy,Mavoh,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,DAYS_PAYMENT_THRESHOLD,extra_wage,,,,,,,,,,,,,,,,
FileSize,,,,,,,,,,,,,,,,,,,,,,,CREDIT_LIMIT,AMOUUNT_TO_CREDIT,credit_balance,,,,,,,,,,,Bool canResize,,,,,,"ABool can_use_credit(int used_credit , int availble_credit",,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bord,,,,,,,,,,,see_bord(mat),,
fileSize,,,,,,,,,,,,,,,,,,,,,,,,,,MAX_ACCU_PER_MONTH,BENEFIT_TO_ILS,CUR_MONTH_BENEFIT,,,,,,,,"boolean resizeHelper(String file, double resizeBy, double freeSpace)",,,,,,,"boolean checkBalance(int entitled, int used)",,,
,,,,,,,,,,,,,,,,,,,,,,,,,,benefit4,benefit2000,benefitnum,,,,,xoCurr,,,,,,,,,,what,xoPlay,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,boardState,,,,,,,,,,,public void displayBoard(self),
,size,,,,,go_to_floor,current_floor,difference_floors,state,,,,,,,,,,time,board_mines,,,,,,BENEFITS,MONEY,client_benefits,,,,,,,,,"bool check_space(FILE* file, int available_space)",,,"int difficulty(int size, int num_of_mines)",,,"bool difference(int BENEFITS, int client_benefits)",,,
,,,,,,,,,,,,,,,,,,,,,,,used,pinuk,use,,,,,,,,,,,,,,"amount(choco,icecream,paper)",,,if pinuk,,,,
,,,,,,Dir1,Dir2,Direction,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
size,,,,,,,,,,,,,cheese_location,visited,labyrinth,,,,,,game_time,cell_data,,,,,,,HOURS_FULL_TIME,OVER_TIME_SALARY,,,,,board,"boolean isRoomForFile(file, newSize, roomInDisk)",,,,,"int gameHardness(int boardWidth, int boardHeight, amount bombs)",,,,,int display (int[][] board)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,MAXIMUM_MONTHLY_MATANOT,MATANA_THRESHOLD,MONTHLY_GIFTS_LEFT,,,,,,,,,,,,,,,,,"use_pinuk(MONTHLY_GIFTS_LEFT,ALREADY_USED_GIFTS)",,,,
fileSize,,,,,,,,,,,,,desirePlase,visitedPlaces,"it would depend on the type of the data arangment, probably labyrinthData",,,,,,,,,,,,,,,,WEAK_FULL_WORK,ADDITION_PER_HOUR,,,,isSpaceEnough,,,,,,,,,,
Size,,,,,,,,,,,,,,,,,,,Game_duration,Adjacent_mines,,,,,,,,,,,,,,,,Check_resizing,,Calculate_profit,,Check_game_difficulty,,,,,,
,,,,,,,,,,cheeseLocation,visited,maze,,,,,,,timeLeft,mineFieldMap,,,MAX_GIFTS,GIFT_THRESHOLD,GiftsAmount,,,,,,FULL_JOB_HOURS,EXTRA_HOURS_RATE,,,,,,,calcCassetsAmount,"findDiffuclty(int mines, int gridSize))",," isGiftsLeft(giftsAmount, usedGifts)",,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,MAX_MONTH_BENEFITS,MINIMAL_BENEFIT_EXPENSE,benefits,FULLTIME_POSITION,overtimeWage,,,,,,,,"int howManyPossiblesandwiches(biscuits, icecream, wrappingPaper)",,,,,"hasMoreBenefits(benefits, used)",,,
,,,,,,,,,,,,,cheeseLocation,visited,labyrinth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File size,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,memory vacancy test,,,,,,,,,,
,,,,,,,,,,,,,,,,Cheesyplace,Wherethemicewas,Maze,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,Wanted_floor,Current_floor,Floor_difference,Is_Open,,,,,,,,,,,,,,Time,Mine_teller,,,TOP_BENEFITS,BENEFIT_START,Num_of_benefits,,,,Basic_time,Over_pay,,,,,,,,"Public int quantity( int chocko, int vanilla,int paper)",,"Public int How_difficult (int mines,int size)",,"Public boolean Can_use_benefit(int canget, int used",,,,
